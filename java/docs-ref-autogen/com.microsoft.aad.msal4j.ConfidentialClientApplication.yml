### YamlMime:JavaType
uid: "com.microsoft.aad.msal4j.ConfidentialClientApplication"
fullName: "com.microsoft.aad.msal4j.ConfidentialClientApplication"
name: "ConfidentialClientApplication"
nameWithType: "ConfidentialClientApplication"
summary: "Class to be used to acquire tokens for confidential client applications (Web Apps, Web APIs, and daemon applications)."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.aad.msal4j.AbstractApplicationBase?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"com.microsoft.aad.msal4j.AbstractApplicationBase?alt=com.microsoft.aad.msal4j.AbstractApplicationBase&text=AbstractApplicationBase\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractApplicationBase.connectTimeoutForDefaultHttpClient()?alt=com.microsoft.aad.msal4j.AbstractApplicationBase.connectTimeoutForDefaultHttpClient&text=connectTimeoutForDefaultHttpClient\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractApplicationBase.correlationId()?alt=com.microsoft.aad.msal4j.AbstractApplicationBase.correlationId&text=correlationId\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractApplicationBase.httpClient()?alt=com.microsoft.aad.msal4j.AbstractApplicationBase.httpClient&text=httpClient\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractApplicationBase.logPii()?alt=com.microsoft.aad.msal4j.AbstractApplicationBase.logPii&text=logPii\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractApplicationBase.proxy()?alt=com.microsoft.aad.msal4j.AbstractApplicationBase.proxy&text=proxy\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractApplicationBase.readTimeoutForDefaultHttpClient()?alt=com.microsoft.aad.msal4j.AbstractApplicationBase.readTimeoutForDefaultHttpClient&text=readTimeoutForDefaultHttpClient\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractApplicationBase.sslSocketFactory()?alt=com.microsoft.aad.msal4j.AbstractApplicationBase.sslSocketFactory&text=sslSocketFactory\" data-throw-if-not-resolved=\"False\" />"
- classRef: "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase&text=AbstractClientApplicationBase\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.aadAadInstanceDiscoveryResponse()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.aadAadInstanceDiscoveryResponse&text=aadAadInstanceDiscoveryResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.acquireToken(com.microsoft.aad.msal4j.AuthorizationCodeParameters)?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.acquireToken&text=acquireToken\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.acquireToken(com.microsoft.aad.msal4j.RefreshTokenParameters)?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.acquireToken&text=acquireToken\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.acquireTokenSilently(com.microsoft.aad.msal4j.SilentParameters)?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.acquireTokenSilently&text=acquireTokenSilently\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.applicationName()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.applicationName&text=applicationName\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.applicationVersion()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.applicationVersion&text=applicationVersion\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.authority()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.authority&text=authority\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.autoDetectRegion()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.autoDetectRegion&text=autoDetectRegion\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.azureRegion()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.azureRegion&text=azureRegion\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.clientAuthentication()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.clientAuthentication&text=clientAuthentication\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.clientCapabilities()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.clientCapabilities&text=clientCapabilities\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.clientId()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.clientId&text=clientId\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.getAccounts()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.getAccounts&text=getAccounts\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.getAuthorizationRequestUrl(com.microsoft.aad.msal4j.AuthorizationRequestUrlParameters)?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.getAuthorizationRequestUrl&text=getAuthorizationRequestUrl\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.instanceDiscovery()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.instanceDiscovery&text=instanceDiscovery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.removeAccount(com.microsoft.aad.msal4j.IAccount)?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.removeAccount&text=removeAccount\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.tokenCache()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.tokenCache&text=tokenCache\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase.validateAuthority()?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase.validateAuthority&text=validateAuthority\" data-throw-if-not-resolved=\"False\" />"
- classRef: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"java.lang.Object.clone()?alt=java.lang.Object.clone&text=clone\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.equals(java.lang.Object)?alt=java.lang.Object.equals&text=equals\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.finalize()?alt=java.lang.Object.finalize&text=finalize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.getClass()?alt=java.lang.Object.getClass&text=getClass\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.hashCode()?alt=java.lang.Object.hashCode&text=hashCode\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notify()?alt=java.lang.Object.notify&text=notify\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notifyAll()?alt=java.lang.Object.notifyAll&text=notifyAll\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.toString()?alt=java.lang.Object.toString&text=toString\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait()?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long,int)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
syntax: "public class **ConfidentialClientApplication**</br> extends <xref href=\"com.microsoft.aad.msal4j.AbstractClientApplicationBase?alt=com.microsoft.aad.msal4j.AbstractClientApplicationBase&text=AbstractClientApplicationBase\" data-throw-if-not-resolved=\"False\" /></br> implements <xref href=\"com.microsoft.aad.msal4j.IConfidentialClientApplication?alt=com.microsoft.aad.msal4j.IConfidentialClientApplication&text=IConfidentialClientApplication\" data-throw-if-not-resolved=\"False\" />"
fields:
- uid: "com.microsoft.aad.msal4j.ConfidentialClientApplication.appTokenProvider"
  fullName: "com.microsoft.aad.msal4j.ConfidentialClientApplication.appTokenProvider"
  name: "appTokenProvider"
  nameWithType: "ConfidentialClientApplication.appTokenProvider"
  summary: "App<wbr>Token<wbr>Provider creates a Credential from a function that provides access tokens."
  field:
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.aad.msal4j.AppTokenProviderParameters?alt=com.microsoft.aad.msal4j.AppTokenProviderParameters&text=AppTokenProviderParameters\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.aad.msal4j.TokenProviderResult?alt=com.microsoft.aad.msal4j.TokenProviderResult&text=TokenProviderResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public Function<AppTokenProviderParameters,CompletableFuture<TokenProviderResult>> appTokenProvider"
  desc: "AppTokenProvider creates a Credential from a function that provides access tokens. The function must be concurrency safe. This is intended only to allow the Azure SDK to cache MSI tokens. It isn't useful to applications in general because the token provider must implement all authentication logic."
methods:
- uid: "com.microsoft.aad.msal4j.ConfidentialClientApplication.acquireToken(com.microsoft.aad.msal4j.ClientCredentialParameters)"
  fullName: "com.microsoft.aad.msal4j.ConfidentialClientApplication.acquireToken(ClientCredentialParameters parameters)"
  name: "acquireToken(ClientCredentialParameters parameters)"
  nameWithType: "ConfidentialClientApplication.acquireToken(ClientCredentialParameters parameters)"
  summary: "Acquires tokens from the authority configured in the application, for the confidential client itself."
  parameters:
  - name: "parameters"
    type: "<xref href=\"com.microsoft.aad.msal4j.ClientCredentialParameters?alt=com.microsoft.aad.msal4j.ClientCredentialParameters&text=ClientCredentialParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<IAuthenticationResult> acquireToken(ClientCredentialParameters parameters)"
  desc: "Acquires tokens from the authority configured in the application, for the confidential client itself. It will by default attempt to get tokens from the token cache. If no tokens are found, it falls back to acquiring them via client credentials from the STS"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.aad.msal4j.IAuthenticationResult?alt=com.microsoft.aad.msal4j.IAuthenticationResult&text=IAuthenticationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.aad.msal4j.ConfidentialClientApplication.acquireToken(com.microsoft.aad.msal4j.OnBehalfOfParameters)"
  fullName: "com.microsoft.aad.msal4j.ConfidentialClientApplication.acquireToken(OnBehalfOfParameters parameters)"
  name: "acquireToken(OnBehalfOfParameters parameters)"
  nameWithType: "ConfidentialClientApplication.acquireToken(OnBehalfOfParameters parameters)"
  summary: "Acquires an access token for this application (usually a Web API) from the authority configured in the application, in order to access another downstream protected Web API on behalf of a user using the On-Behalf-Of flow."
  parameters:
  - name: "parameters"
    type: "<xref href=\"com.microsoft.aad.msal4j.OnBehalfOfParameters?alt=com.microsoft.aad.msal4j.OnBehalfOfParameters&text=OnBehalfOfParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<IAuthenticationResult> acquireToken(OnBehalfOfParameters parameters)"
  desc: "Acquires an access token for this application (usually a Web API) from the authority configured in the application, in order to access another downstream protected Web API on behalf of a user using the On-Behalf-Of flow. It will by default attempt to get tokens from the token cache. This confidential client application was itself called with an acces token which is provided in the <xref uid=\"com.microsoft.aad.msal4j.UserAssertion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserAssertion\"></xref> field of <xref uid=\"com.microsoft.aad.msal4j.OnBehalfOfParameters\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OnBehalfOfParameters\"></xref>.\n\nWhen serializing/deserializing the in-memory token cache to permanent storage, there should be a token cache per incoming access token, where the hash of the incoming access token can be used as the token cache key. Access tokens are usually only valid for a 1 hour period of time, and a new access token in the <xref uid=\"com.microsoft.aad.msal4j.UserAssertion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserAssertion\"></xref> means there will be a new token cache and new token cache key. To avoid your permanent storage from being filled with expired token caches, an eviction policy should be set. For example, a token cache that is more than a couple of hours old can be deemed expired and therefore evicted from the serialized token cache."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.aad.msal4j.IAuthenticationResult?alt=com.microsoft.aad.msal4j.IAuthenticationResult&text=IAuthenticationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.aad.msal4j.ConfidentialClientApplication.builder(java.lang.String,com.microsoft.aad.msal4j.IClientCredential)"
  fullName: "com.microsoft.aad.msal4j.ConfidentialClientApplication.builder(String clientId, IClientCredential clientCredential)"
  name: "builder(String clientId, IClientCredential clientCredential)"
  nameWithType: "ConfidentialClientApplication.builder(String clientId, IClientCredential clientCredential)"
  summary: "Creates instance of Builder of Confidential<wbr>Client<wbr>Application"
  modifiers:
  - "static"
  parameters:
  - description: "Client ID (Application ID) of the application as registered\n\n                         in the application registration portal (portal.azure.com)"
    name: "clientId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The client credential to use for token acquisition."
    name: "clientCredential"
    type: "<xref href=\"com.microsoft.aad.msal4j.IClientCredential?alt=com.microsoft.aad.msal4j.IClientCredential&text=IClientCredential\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static ConfidentialClientApplication.Builder builder(String clientId, IClientCredential clientCredential)"
  desc: "Creates instance of Builder of ConfidentialClientApplication"
  returns:
    description: "instance of Builder of ConfidentialClientApplication"
    type: "<xref href=\"com.microsoft.aad.msal4j.ConfidentialClientApplication.Builder?alt=com.microsoft.aad.msal4j.ConfidentialClientApplication.Builder&text=Builder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.aad.msal4j.ConfidentialClientApplication.clientAuthentication()"
  fullName: "com.microsoft.aad.msal4j.ConfidentialClientApplication.clientAuthentication()"
  name: "clientAuthentication()"
  nameWithType: "ConfidentialClientApplication.clientAuthentication()"
  modifiers:
  - "protected"
  overridden: "com.microsoft.aad.msal4j.AbstractClientApplicationBase.clientAuthentication()"
  syntax: "protected ClientAuthentication clientAuthentication()"
  returns:
    type: "<xref href=\"com.nimbusds.oauth2.sdk.auth.ClientAuthentication?alt=com.nimbusds.oauth2.sdk.auth.ClientAuthentication&text=ClientAuthentication\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.aad.msal4j.ConfidentialClientApplication.createClientAuthFromClientAssertion(com.microsoft.aad.msal4j.ClientAssertion)"
  fullName: "com.microsoft.aad.msal4j.ConfidentialClientApplication.createClientAuthFromClientAssertion(ClientAssertion clientAssertion)"
  name: "createClientAuthFromClientAssertion(ClientAssertion clientAssertion)"
  nameWithType: "ConfidentialClientApplication.createClientAuthFromClientAssertion(ClientAssertion clientAssertion)"
  modifiers:
  - "protected"
  parameters:
  - name: "clientAssertion"
    type: "<xref href=\"com.microsoft.aad.msal4j.ClientAssertion?alt=com.microsoft.aad.msal4j.ClientAssertion&text=ClientAssertion\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected ClientAuthentication createClientAuthFromClientAssertion(ClientAssertion clientAssertion)"
  returns:
    type: "<xref href=\"com.nimbusds.oauth2.sdk.auth.ClientAuthentication?alt=com.nimbusds.oauth2.sdk.auth.ClientAuthentication&text=ClientAuthentication\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.aad.msal4j.ConfidentialClientApplication.sendX5c()"
  fullName: "com.microsoft.aad.msal4j.ConfidentialClientApplication.sendX5c()"
  name: "sendX5c()"
  nameWithType: "ConfidentialClientApplication.sendX5c()"
  syntax: "public boolean sendX5c()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Class to be used to acquire tokens for confidential client applications (Web Apps, Web APIs, and daemon applications). For details see <xref uid=\"com.microsoft.aad.msal4j.IConfidentialClientApplication\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IConfidentialClientApplication\"></xref>\n\nConditionally thread-safe"
implements:
- "<xref href=\"com.microsoft.aad.msal4j.IConfidentialClientApplication?alt=com.microsoft.aad.msal4j.IConfidentialClientApplication&text=IConfidentialClientApplication\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.aad.msal4j"
artifact: com.microsoft.azure:msal4j:1.17.1
