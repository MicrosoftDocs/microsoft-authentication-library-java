### YamlMime:JavaType
uid: "com.microsoft.aad.msal4j.IBroker"
fullName: "com.microsoft.aad.msal4j.IBroker"
name: "IBroker"
nameWithType: "IBroker"
summary: "Used to define the basic set of methods that all Brokers must implement"
syntax: "public interface **IBroker**"
methods:
- uid: "com.microsoft.aad.msal4j.IBroker.acquireToken(com.microsoft.aad.msal4j.PublicClientApplication,com.microsoft.aad.msal4j.InteractiveRequestParameters)"
  fullName: "com.microsoft.aad.msal4j.IBroker.acquireToken(PublicClientApplication application, InteractiveRequestParameters parameters)"
  name: "acquireToken(PublicClientApplication application, InteractiveRequestParameters parameters)"
  nameWithType: "IBroker.acquireToken(PublicClientApplication application, InteractiveRequestParameters parameters)"
  summary: "Acquire a token interactively, by prompting users to enter their credentials in some way"
  modifiers:
  - "default"
  parameters:
  - name: "application"
    type: "<xref href=\"com.microsoft.aad.msal4j.PublicClientApplication?alt=com.microsoft.aad.msal4j.PublicClientApplication&text=PublicClientApplication\" data-throw-if-not-resolved=\"False\" />"
  - name: "parameters"
    type: "<xref href=\"com.microsoft.aad.msal4j.InteractiveRequestParameters?alt=com.microsoft.aad.msal4j.InteractiveRequestParameters&text=InteractiveRequestParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default CompletableFuture<IAuthenticationResult> acquireToken(PublicClientApplication application, InteractiveRequestParameters parameters)"
  desc: "Acquire a token interactively, by prompting users to enter their credentials in some way"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.aad.msal4j.IAuthenticationResult?alt=com.microsoft.aad.msal4j.IAuthenticationResult&text=IAuthenticationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.aad.msal4j.IBroker.acquireToken(com.microsoft.aad.msal4j.PublicClientApplication,com.microsoft.aad.msal4j.SilentParameters)"
  fullName: "com.microsoft.aad.msal4j.IBroker.acquireToken(PublicClientApplication application, SilentParameters requestParameters)"
  name: "acquireToken(PublicClientApplication application, SilentParameters requestParameters)"
  nameWithType: "IBroker.acquireToken(PublicClientApplication application, SilentParameters requestParameters)"
  summary: "Acquire a token silently, i.<wbr>e."
  modifiers:
  - "default"
  parameters:
  - name: "application"
    type: "<xref href=\"com.microsoft.aad.msal4j.PublicClientApplication?alt=com.microsoft.aad.msal4j.PublicClientApplication&text=PublicClientApplication\" data-throw-if-not-resolved=\"False\" />"
  - name: "requestParameters"
    type: "<xref href=\"com.microsoft.aad.msal4j.SilentParameters?alt=com.microsoft.aad.msal4j.SilentParameters&text=SilentParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default CompletableFuture<IAuthenticationResult> acquireToken(PublicClientApplication application, SilentParameters requestParameters)"
  desc: "Acquire a token silently, i.e. without direct user interaction\n\nThis may be accomplished by returning tokens from a token cache, using cached refresh tokens to get new tokens, or via any authentication flow where a user is not prompted to enter credentials"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.aad.msal4j.IAuthenticationResult?alt=com.microsoft.aad.msal4j.IAuthenticationResult&text=IAuthenticationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.aad.msal4j.IBroker.acquireToken(com.microsoft.aad.msal4j.PublicClientApplication,com.microsoft.aad.msal4j.UserNamePasswordParameters)"
  fullName: "com.microsoft.aad.msal4j.IBroker.acquireToken(PublicClientApplication application, UserNamePasswordParameters parameters)"
  name: "acquireToken(PublicClientApplication application, UserNamePasswordParameters parameters)"
  nameWithType: "IBroker.acquireToken(PublicClientApplication application, UserNamePasswordParameters parameters)"
  summary: "Acquire a token silently, i.<wbr>e."
  modifiers:
  - "default"
  parameters:
  - name: "application"
    type: "<xref href=\"com.microsoft.aad.msal4j.PublicClientApplication?alt=com.microsoft.aad.msal4j.PublicClientApplication&text=PublicClientApplication\" data-throw-if-not-resolved=\"False\" />"
  - name: "parameters"
    type: "<xref href=\"com.microsoft.aad.msal4j.UserNamePasswordParameters?alt=com.microsoft.aad.msal4j.UserNamePasswordParameters&text=UserNamePasswordParameters\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default CompletableFuture<IAuthenticationResult> acquireToken(PublicClientApplication application, UserNamePasswordParameters parameters)"
  desc: "Acquire a token silently, i.e. without direct user interaction, using username/password authentication"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.aad.msal4j.IAuthenticationResult?alt=com.microsoft.aad.msal4j.IAuthenticationResult&text=IAuthenticationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.aad.msal4j.IBroker.isBrokerAvailable()"
  fullName: "com.microsoft.aad.msal4j.IBroker.isBrokerAvailable()"
  name: "isBrokerAvailable()"
  nameWithType: "IBroker.isBrokerAvailable()"
  summary: "Returns whether a broker is available and ready to use on this machine, allowing the use of the methods in this interface and other broker-only features in MSAL Java"
  modifiers:
  - "default"
  syntax: "public default boolean isBrokerAvailable()"
  desc: "Returns whether a broker is available and ready to use on this machine, allowing the use of the methods in this interface and other broker-only features in MSAL Java"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.aad.msal4j.IBroker.parseBrokerAuthResult(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,boolean)"
  fullName: "com.microsoft.aad.msal4j.IBroker.parseBrokerAuthResult(String authority, String idToken, String accessToken, String accountId, String clientInfo, long accessTokenExpirationTime, boolean isPopAuthorization)"
  name: "parseBrokerAuthResult(String authority, String idToken, String accessToken, String accountId, String clientInfo, long accessTokenExpirationTime, boolean isPopAuthorization)"
  nameWithType: "IBroker.parseBrokerAuthResult(String authority, String idToken, String accessToken, String accountId, String clientInfo, long accessTokenExpirationTime, boolean isPopAuthorization)"
  summary: "MSAL Java's Authentication<wbr>Result requires several package-private classes that a broker implementation can't access, so this helper method can be used to create Authentication<wbr>Results from within the MSAL Java package"
  modifiers:
  - "default"
  parameters:
  - name: "authority"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "idToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "accessToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "accountId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "clientInfo"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "accessTokenExpirationTime"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - name: "isPopAuthorization"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default IAuthenticationResult parseBrokerAuthResult(String authority, String idToken, String accessToken, String accountId, String clientInfo, long accessTokenExpirationTime, boolean isPopAuthorization)"
  desc: "MSAL Java's AuthenticationResult requires several package-private classes that a broker implementation can't access, so this helper method can be used to create AuthenticationResults from within the MSAL Java package"
  returns:
    type: "<xref href=\"com.microsoft.aad.msal4j.IAuthenticationResult?alt=com.microsoft.aad.msal4j.IAuthenticationResult&text=IAuthenticationResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.aad.msal4j.IBroker.removeAccount(com.microsoft.aad.msal4j.PublicClientApplication,com.microsoft.aad.msal4j.IAccount)"
  fullName: "com.microsoft.aad.msal4j.IBroker.removeAccount(PublicClientApplication application, IAccount account)"
  name: "removeAccount(PublicClientApplication application, IAccount account)"
  nameWithType: "IBroker.removeAccount(PublicClientApplication application, IAccount account)"
  modifiers:
  - "default"
  parameters:
  - name: "application"
    type: "<xref href=\"com.microsoft.aad.msal4j.PublicClientApplication?alt=com.microsoft.aad.msal4j.PublicClientApplication&text=PublicClientApplication\" data-throw-if-not-resolved=\"False\" />"
  - name: "account"
    type: "<xref href=\"com.microsoft.aad.msal4j.IAccount?alt=com.microsoft.aad.msal4j.IAccount&text=IAccount\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default void removeAccount(PublicClientApplication application, IAccount account)"
  exceptions:
  - type: "<xref href=\"com.microsoft.aad.msal4j.MsalClientException?alt=com.microsoft.aad.msal4j.MsalClientException&text=MsalClientException\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Used to define the basic set of methods that all Brokers must implement\n\nAll methods are marked as default so they can be referenced by MSAL Java without an implementation, and most will simply throw an exception if not overridden by an IBroker implementation"
metadata: {}
package: "com.microsoft.aad.msal4j"
artifact: com.microsoft.azure:msal4j:1.17.1
